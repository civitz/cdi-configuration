package ${packageName};

import static java.util.stream.Collectors.joining;
import static java.util.stream.Stream.concat;

import java.util.ArrayList;

import javax.annotation.PostConstruct;
import javax.annotation.Generated;
import javax.enterprise.inject.Produces;
import javax.enterprise.inject.spi.InjectionPoint;
import javax.inject.Inject;

import viper.ConfigurationResolver;

#foreach( $annotation in $passedAnnotations )
@$annotation
#end
@Generated("$generatorName")
public class ${enumClass}ConfigurationBean {

	@Inject
	ConfigurationResolver<${enumClass}> resolver;

#if ( $validator )
	@PostConstruct
	void validateProperties() {
		ArrayList<String> invalid= new ArrayList<>();
		for (${enumClass} config : ${enumClass}.values()) {
			String property = resolver.getConfigurationValue(config);
			if (!isValid(config, property)) {
				invalid.add(formatInvalid(config, property));
			}
		}
		if (invalid.size() > 0) {
			String reasons = invalid.stream().collect(joining(", "));
			throw new IllegalArgumentException("Configuration is invalid for these reason: " + reasons);
		}
	}

	private String formatInvalid(${enumClass} config, String property) {
		return "Property " + config.name() + " (" + resolver.getConfigurationKey(config) + ") is invalid for value \"" + property
				+ "\"";
	}

	private static boolean isValid(${enumClass} config, String property) {
		return config.${validator}.test(property);
	}
#end

	public String getProperty(${enumClass} keyEnum) {
		return resolver.getConfigurationValue(keyEnum);
	}
	
	private ${enumClass} getEnumFromInjectionPoint(InjectionPoint ip) {
		${enumClass}Configuration annotation = ip.getAnnotated().getAnnotation(${enumClass}Configuration.class);
		return annotation.value();
	}

	@Produces
	@${enumClass}Configuration
	private String getStringProperty(InjectionPoint ip) {
		${enumClass} keyEnum = getEnumFromInjectionPoint(ip);
		return getProperty(keyEnum);
	}

#if ( $producersForPrimitives )
#foreach ($type in ["Byte", "Short", "Integer", "Long", "Float", "Double", "Boolean"])
	@Produces
	@${enumClass}Configuration
	private ${type} get${type}Property(InjectionPoint ip) {
		String stringProperty = getStringProperty(ip);
		return ${type}.valueOf(stringProperty);
	}
#end
	
	@Produces
	@${enumClass}Configuration
	private Character getCharacterProperty(InjectionPoint ip) {
		String stringProperty = getStringProperty(ip);
		return stringProperty.charAt(0);
	}
#end
}
